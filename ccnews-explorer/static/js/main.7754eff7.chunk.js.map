{"version":3,"sources":["QueryInput/QueryInput.js","TopicViewer/TopicViewer.js","App.js","serviceWorker.js","index.js"],"names":["QueryInput","props","state","outputText","handleTextChange","currentStr","keyStrokeSplit","keyStrokeIndex","length","keyStrokeTime","timerID","setTimeout","setState","cursorText","keyStrokeInfo","split","syncStart","currentTime","mode","browser","summaryLength","device","firstChange","findKeyStrokeIndexOfFirstChange","totalTime","computeTotalTime","this","clearTimeout","result","i","startingPoint","Number","prevProps","prevState","snapshot","newKeyStrokeIndex","newKeyStrokeTime","modality","icon","faHeadphones","faFont","faChrome","faEdge","faFirefox","faSafari","faOpera","faMobileAlt","faDesktop","faTabletAlt","className","Progress","value","max","faSearch","dangerouslySetInnerHTML","__html","Component","TopicViewer","handleCurrentTimeUpdate","qCount","topicId","showBackstories","buttonText","getText","fetch","then","response","json","topicData","setInterval","clearInterval","showingBackstories","event","target","undefined","checked","queries","numberOfQueries","queryInputs","keysUsed","query","summary_modality","summary_length","includes","uid","push","key","typed_sequence","queriesSubmitted","topicTitle","topicSummaryShort","topicSummaryLong","meanQueryLength","uniqueQueryCount","uniqueWorkers","interleaveModalities","doc_title","doc_summary_short","doc_summary_long","mean_length","unique_queries","unique_workers","src","alt","style","color","Row","Col","type","maxLength","size","name","onChange","handleTopicChange","bind","handleQCountChange","handleSyncChange","Button","onClick","toggle","marginBottom","Collapse","isOpen","CardDeck","Card","body","outline","CardTitle","tag","CardText","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7754eff7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Progress } from 'reactstrap';\n\nimport { faSearch, faHeadphones, faFont, faTabletAlt, faDesktop, faMobileAlt} from \"@fortawesome/free-solid-svg-icons\";\nimport { faChrome, faEdge, faFirefox, faSafari, faOpera} from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport './QueryInput.css';\n\n\nclass QueryInput extends Component {\n    state = { \n        outputText: \"\",\n    }\n\n    componentDidMount() {\n        this.timerID = setTimeout(\n            () => this.handleTextChange(),\n            this.state.keyStrokeTime\n        )\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.timerID);\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        // Any time the current user changes,\n        // Reset any parts of state that are tied to that user.\n        // In this simple example, that's just the email.\n        if (props.syncStart !== state.syncStart) {\n            return {\n                syncStart: props.syncStart,\n            }\n        }\n\n        if (props.currentTime !== state.currentTime) {\n            return {\n                currentTime: props.currentTime,\n                syncStart: props.syncStart\n            };\n        }\n        return null;\n    }\n\n    findKeyStrokeIndexOfFirstChange() {\n        var result = this.state.syncStart ? 4 : 0;\n        if (this.state.syncStart) {\n            for (var i = result; i < this.state.keyStrokeSplit.length; i++) {\n                if (i % 2 != 0) {\n                    if (this.state.keyStrokeSplit[i] != \"\") {\n                        return i - 1;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    computeTotalTime(startingPoint) {\n        var totalTime = 0;\n        for (var i = startingPoint; i < this.state.keyStrokeSplit.length; i++) {\n            if (i % 2 == 0) {\n                totalTime += Number(this.state.keyStrokeSplit[i]);\n            }\n        }\n        return totalTime;\n    }\n\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.currentTime > this.props.currentTime || prevProps.syncStart !== this.props.syncStart) {\n            clearTimeout(this.timerID);\n            var newKeyStrokeIndex = this.findKeyStrokeIndexOfFirstChange();\n            var newKeyStrokeTime = this.state.keyStrokeSplit[newKeyStrokeIndex];\n            this.setState({\n                keyStrokeIndex: newKeyStrokeIndex,\n                currentTime: this.props.currentTime,\n                keyStrokeTime: newKeyStrokeTime,\n                outputText: \"<span class=\\\"cursor\\\">|</span>\",\n                totalTime: this.computeTotalTime(newKeyStrokeIndex)\n            });\n\n            this.timerID = setTimeout(\n                () => this.handleTextChange(),\n                newKeyStrokeTime\n            )\n        }\n    }\n\n    handleTextChange = () => {\n        var currentStr = this.state.keyStrokeSplit[this.state.keyStrokeIndex + 1];\n        if (this.state.keyStrokeIndex + 2 < this.state.keyStrokeSplit.length) {\n          this.state.keyStrokeIndex += 2;\n          this.state.keyStrokeTime = this.state.keyStrokeSplit[this.state.keyStrokeIndex];\n        }\n\n        this.timerID = setTimeout(\n            () => this.handleTextChange(),\n            this.state.keyStrokeTime\n        )\n\n        return this.setState({\n            outputText : currentStr + this.state.cursorText, \n            //outputText : this.outputText.substring(0, rand) + this.cursorText + this.outputText.substring(rand),\n        })\n    }\n\n    constructor(props) {\n        super(props);\n        this.state.keyStrokeSplit = this.props.keyStrokeInfo.split(\"|\");\n\n\n        this.state.syncStart = this.props.syncStart;\n        this.state.currentTime = this.props.currentTime;\n        this.state.mode = this.props.mode;\n        this.state.browser = this.props.browser;\n        this.state.summaryLength = this.props.summaryLength;\n        this.state.device = this.props.device;\n        var firstChange = this.findKeyStrokeIndexOfFirstChange();\n        this.state.keyStrokeIndex = firstChange; \n        this.state.totalTime = this.computeTotalTime(firstChange);\n        this.state.keyStrokeTime = this.state.keyStrokeSplit[firstChange];\n        this.state.cursorText = \"<span class=\\\"cursor\\\">|</span>\";\n    }\n\n    render() { \n        var modality = (<p></p>);\n        if (this.state.mode == \"audio\") {\n            modality = (<FontAwesomeIcon icon={faHeadphones} />);\n        } else if (this.state.mode == \"image\") {\n            modality = (<FontAwesomeIcon icon={faFont} />); \n        }\n\n        var browser = (<p></p>);\n        if (this.state.browser == \"Chrome\" || \n            this.state.browser == \"Chrome Mobile\" ||\n            this.state.browser == \"Chrome Mobile iOS\" ||\n            this.state.browser == \"Chromium\") {\n            browser = (<FontAwesomeIcon icon={faChrome} />);\n        } else if (this.state.browser == \"Edge\") {\n            browser = (<FontAwesomeIcon icon={faEdge} />);\n        } else if (this.state.browser == \"Firefox\") {\n            browser = (<FontAwesomeIcon icon={faFirefox} />);\n        } else if (this.state.browser == \"Safari\" || \n            this.state.browser == \"Mobile Safari\") {\n            browser = (<FontAwesomeIcon icon={faSafari} />);\n        } else if (this.state.browser == \"Opera\") {\n            browser = (<FontAwesomeIcon icon={faOpera} />); \n        }\n\n        var device = (<p></p>);\n        if (this.state.device == \"Mobile\") {\n            device = (<FontAwesomeIcon icon={faMobileAlt} />);\n        } else if (this.state.device == \"PC\") {\n            device = (<FontAwesomeIcon icon={faDesktop} />); \n        } else if (this.state.device == \"Tablet\") {\n            device = (<FontAwesomeIcon icon={faTabletAlt} />); \n        }\n\n        var summaryLength = (<p></p>);\n        if (this.state.summaryLength == \"long\") {\n            summaryLength = (<span>L</span>);\n        } else if (this.state.summaryLength == \"short\") {\n            summaryLength = (<span>S</span>);\n        } else if (this.state.summaryLength == \"title\") {\n            summaryLength = (<span>T</span>);\n        }\n\n        return ( \n            <div className=\"queryContainer\">\n                <span className=\"textInnerBox\">\n                    <Progress className=\"progressBar\" value={this.state.currentTime} max={this.state.totalTime} /> {modality} {browser} {device} {summaryLength}\n                </span>\n\n                <div className=\"queryBox\">\n                    <FontAwesomeIcon className=\"searchIcon\" icon={faSearch} />\n                    \n                    <span className=\"textInnerBox\" dangerouslySetInnerHTML={{ __html: this.state.outputText }} />\n                </div>\n            </div>\n        );\n    }\n}\n \nexport default QueryInput;","import React, { Component, useState } from 'react';\nimport QueryInput from '../QueryInput/QueryInput';\nimport { Container, Row, Col, Button, Card, CardTitle, CardText, CardDeck, Collapse } from 'reactstrap';\n\nimport './TopicViewer.css';\n\nclass TopicViewer extends Component {\n\n    componentDidMount() {\n        fetch('./joined/' + this.state.topicId + '.json')\n            .then(response => response.json())\n            .then(topicData => this.setState({ topicData }));\n\n        this.timerID = setInterval(\n            () => this.handleCurrentTimeUpdate(),\n            1000\n        )\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    handleCurrentTimeUpdate = () => {\n        var currentTime = this.state.currentTime;\n        if (currentTime == null) {\n            this.setState( {currentTime: 0} );\n        }\n        else {\n            this.setState( {currentTime: currentTime + 1000} );\n        }\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = { qCount: 12, topicId: this.props.topicId, syncStart: true, showBackstories: false, buttonText: this.getText(false)}\n    }\n\n   getText(showingBackstories) {\n      if (showingBackstories)\n       return \"Hide Backstories\";\n     return \"Show Backstories\";\n   }\n\n   toggle() {\n      this.setState({ showBackstories: !this.state.showBackstories , buttonText : this.getText(!this.state.showBackstories)});\n   }\n\n    handleTopicChange(event) {\n        this.setState({ topicData: null, topicId: event.target.value, currentTime: 0})\n\n        if (event.target.value != undefined && event.target.value > 0) {\n            fetch('./joined/' + event.target.value + '.json')\n                .then(response => response.json())\n                .then(topicData => this.setState({ topicData }));\n        }\n    }\n\n    handleQCountChange(event) {\n        clearInterval(this.timerID);\n\n        this.timerID = setInterval(\n            () => this.handleCurrentTimeUpdate(),\n            1000\n        )\n\n        this.setState({qCount: event.target.value, currentTime: 0})\n    }\n\n    handleSyncChange(event) {\n        clearInterval(this.timerID);\n\n        this.timerID = setInterval(\n            () => this.handleCurrentTimeUpdate(),\n            1000\n        )\n\n        this.setState({syncStart: event.target.checked, currentTime: 0});\n    }\n\n    interleaveModalities(queries, numberOfQueries, currentTime) {\n        var queryInputs = [];\n        var keysUsed = [];\n\n        if (numberOfQueries > queries.length) {\n          numberOfQueries = queries.length;\n        }\n\n        while(queryInputs.length < numberOfQueries) {\n            for (var mode of [\"image\", \"audio\"]) {\n                for (var summaryLength of [\"title\", \"short\", \"long\"]) {\n                    for (var i = 0; i < queries.length; i++) {\n                        var query = queries[i];\n                        if (query.summary_modality == mode &&\n                            query.summary_length == summaryLength &&\n                            !keysUsed.includes(query.uid)) {\n                            keysUsed.push(query.uid);\n                            queryInputs.push(\n                                <QueryInput key={query.uid} \n                                    syncStart={this.state.syncStart}\n                                    currentTime={currentTime}\n                                    mode={query.summary_modality} \n                                    summaryLength={query.summary_length}\n                                    device={query.device}\n                                    browser={query.browser} \n                                    keyStrokeInfo={query.typed_sequence} />\n                            );\n                            break;\n                        }\n                    }\n\n                    if (queryInputs.length == numberOfQueries) return queryInputs;\n                }\n            }\n        }\n\n        return queryInputs;\n    }\n\n    render() { \n        var queryInputs = (<p>Loading</p>); \n        var queriesSubmitted = (<p>Loading</p>);\n        var topicTitle = (<p>Loading</p>);\n        var topicSummaryShort = (<p>Loading</p>);\n        var topicSummaryLong = (<p>Loading</p>);\n        var meanQueryLength = (<p>Loading</p>);\n        var uniqueQueryCount = (<p>Loading</p>);\n        var uniqueWorkers = (<p>Loading</p>);\n\n        if (this.state.topicData != undefined) {\n            queryInputs = this.interleaveModalities(this.state.topicData.queries, this.state.qCount, this.state.currentTime);\n            queriesSubmitted = this.state.topicData.queries.length;\n            topicTitle = this.state.topicData.doc_title; \n            topicSummaryShort = this.state.topicData.doc_summary_short;\n            topicSummaryLong = this.state.topicData.doc_summary_long;\n            meanQueryLength = this.state.topicData.mean_length;\n            uniqueQueryCount = this.state.topicData.unique_queries;\n            uniqueWorkers = this.state.topicData.unique_workers;\n        \n        }\n\n      return (\n            <div>\n                <div className=\"topicInfoContainer\">\n                    <img src=\"cc.png\" className=\"logo\" alt=\"CC News Query Explorer\"/>\n                    <h2 style={{color:\"red\"}}>BETA</h2>\n                    <br/><br/>\n                    <Row>\n                        <Col>\n                            <h4 style={{color:\"red\"}}>Topic Selector</h4>\n                            <b>Topic</b>: <input type=\"text\" maxLength=\"3\" size=\"3\" name=\"topic\" value={this.state.topicId} onChange={this.handleTopicChange.bind(this)} />\n                            <br/><br/>\n                            <h4>{topicTitle}</h4> \n                        </Col>\n\n                        <Col>\n                            <h4 style={{color:\"red\"}}>Topic Statistics</h4>\n                            <b>Queries Submitted</b>: {queriesSubmitted}<br></br>\n                            <b>Mean Query Length (By Terms)</b>: {meanQueryLength}<br></br>\n                            <b>Unique Query Count</b>: {uniqueQueryCount}<br></br>\n                            <b>Unique Workers</b>: {uniqueWorkers}\n                        </Col>\n                        <Col>\n                            <h4 style={{color:\"red\"}}>Control Panel</h4>\n                            <b>Number Of Queries</b>: <input type=\"text\" maxLength=\"3\" size=\"3\" name=\"qCount\" value={this.state.qCount} onChange={this.handleQCountChange.bind(this)} />\n                            <br/>\n                            <b>Sync Start Times</b>: <input type=\"checkbox\" name=\"syncStart\" checked={this.state.syncStart} onChange={this.handleSyncChange.bind(this)} />\n                            <br/>\n                            <Button color=\"info\" onClick={this.toggle.bind(this)} style={{ marginBottom: '1rem' }}>{this.state.buttonText}</Button>\n \n                        </Col>\n                    </Row>\n                    <br></br>\n\n                 <Collapse isOpen={this.state.showBackstories}>\n                    <CardDeck>\n                        <Card body outline color=\"info\">\n                          <CardTitle className=\"text-center\" tag=\"h4\">Short Summary</CardTitle>\n                          <CardText>{topicSummaryShort}</CardText>\n                        </Card>\n                        <Card body outline color=\"info\">\n                          <CardTitle className=\"text-center\" tag=\"h4\">Long Summary</CardTitle>\n                          <CardText>{topicSummaryLong}</CardText>\n                        </Card>\n                    </CardDeck>\n                </Collapse>\n              </div>\n              <div>\n                    { queryInputs }\n              </div>\n            </div>\n        );\n    }\n}\n \nexport default TopicViewer;\n","import React from 'react';\nimport './App.css';\nimport TopicViewer from './TopicViewer/TopicViewer';\n\n\nfunction App() {\n  return (\n    <div>\n      <TopicViewer topicId=\"1\" />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}