{"version":3,"sources":["QueryInput/QueryInput.js","TopicViewer/TopicViewer.js","App.js","serviceWorker.js","index.js"],"names":["QueryInput","props","state","outputText","handleTextChange","timestamp","elapsed","currentStr","keyStrokeSplit","keyStrokeIndex","cumulativeTime","keyStrokeTime","currentInterval","length","speedModifier","start","setState","cursorText","animationId","keyStrokeInfo","split","syncStart","finished","mode","browser","summaryLength","device","firstChange","totalTime","playing","this","startPlaying","undefined","animationID","window","requestAnimationFrame","update","bind","cancelAnimationFrame","prevProps","prevState","snapshot","currentTime","newKeyStrokeIndex","newKeyStrokeTime","modality","modalityDescription","modalityIconId","queryKey","icon","faHeadphones","faFont","browserDescription","browserIconId","faChrome","faEdge","faFirefox","faSafari","faOpera","deviceDescription","deviceIconId","faMobileAlt","faDesktop","faTabletAlt","summaryDescription","summaryIconId","className","id","UncontrolledTooltip","placement","target","faSearch","dangerouslySetInnerHTML","__html","Component","TopicViewer","handleCurrentTimeUpdate","maximumTime","autoPlay","nextTopic","qCount","topicId","showSummaries","backButtonText","getBackButtonText","showStats","showSpeedMenu","speedButtonText","getSpeedText","fetch","then","response","json","topicData","stopPlaying","showingSummaries","Number","toFixed","faStop","faPlayCircle","currentTopic","stopAutoplay","startAutoplay","event","value","checked","clearInterval","timerID","result","i","startingPoint","queries","numberOfQueries","queryInputs","keysUsed","maxTime","query","summary_modality","summary_length","includes","uid","push","typed_sequence","findKeyStrokeIndexOfFirstChange","computeTotalTime","key","wrappedInputs","Row","queriesSubmitted","topicTitle","topicSummaryShort","topicSummaryLong","meanQueryLength","uniqueQueryCount","uniqueWorkers","interleaveModalities","wrapQueryInputsInColumns","doc_title","doc_summary_short","doc_summary_long","mean_length","unique_queries","unique_workers","src","alt","href","onClick","togglePlayPause","getPlayPauseIcon","restartTopic","faUndo","prevTopic","faStepBackward","type","maxLength","size","name","onChange","handleTopicChange","faStepForward","handleAutoplayChange","for","Col","Progress","color","max","style","transition","display","handleQCountChange","handleSyncChange","ButtonDropdown","isOpen","toggle","toggleSpeedMenu","DropdownToggle","caret","DropdownMenu","DropdownItem","handleSpeedChange","Button","toggleBack","Collapse","CardDeck","Card","body","outline","CardTitle","tag","CardText","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f0416e03.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { UncontrolledTooltip, Progress } from 'reactstrap';\n\nimport { faSearch, faHeadphones, faFont, faTabletAlt, faDesktop, faMobileAlt} from \"@fortawesome/free-solid-svg-icons\";\nimport { faChrome, faEdge, faFirefox, faSafari, faOpera} from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport './QueryInput.css';\n\n\nclass QueryInput extends Component {\n    state = { \n        outputText: \"\",\n    }\n\n    componentDidMount() {\n        if (this.state.playing) {\n            this.startPlaying();\n        }\n    }\n\n    handleTextChange = (timestamp, elapsed) => {\n        var currentStr = this.state.keyStrokeSplit[this.state.keyStrokeIndex + 1];\n        var cumulativeTime = this.state.keyStrokeTime;\n        var currentInterval = 0;\n        \n        while (this.state.keyStrokeIndex + 2 < this.state.keyStrokeSplit.length) {\n            this.state.keyStrokeIndex += 2;\n            currentInterval = this.state.keyStrokeSplit[this.state.keyStrokeIndex] * (1.0 / this.state.speedModifier);\n            cumulativeTime += currentInterval; \n\n            if (elapsed < cumulativeTime) {\n                this.state.keyStrokeTime = currentInterval;\n                this.start = timestamp;\n                cumulativeTime -= currentInterval;\n                break;\n            }\n        }\n        \n        this.setState({\n            outputText : currentStr + this.state.cursorText, \n        })\n    }\n\n\n    update(timestamp) {\n        if (this.start == undefined) {\n            this.start = timestamp;\n        }\n\n        const elapsed = timestamp - this.start;\n\n        if (elapsed > this.state.keyStrokeTime) {\n            this.handleTextChange(timestamp, elapsed);\n        }\n\n        if (this.state.keyStrokeTime != -1) {\n            this.animationID = window.requestAnimationFrame(this.update.bind(this));\n        }\n\n        if (this.state.keyStrokeIndex + 2 >= this.state.keyStrokeSplit.length) {\n            this.state.keyStrokeTime = -1;\n            this.setState({finished: true});\n        }\n    }\n\n    startPlaying() {\n        this.animationID = window.requestAnimationFrame(this.update.bind(this)); \n    }\n\n    componentWillUnmount() {\n        window.cancelAnimationFrame(this.animationID);\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        // Any time the current user changes,\n        // Reset any parts of state that are tied to that user.\n        // In this simple example, that's just the email.\n        if (props.syncStart !== state.syncStart || \n            props.currentTime !== state.currentTime ||\n            props.playing !== state.playing) {\n            return {\n                syncStart: props.syncStart,\n                playing: props.playing,\n                totalTime: props.totalTime\n            }\n        }\n\n        return null;\n    }\n    \n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.playing !== this.props.playing && !this.props.playing) {\n            window.cancelAnimationFrame(this.animationID);\n            return;\n        }\n\n        if ((prevProps.playing !== this.props.playing && this.props.playing) || \n            prevProps.currentTime > this.props.currentTime || \n            prevProps.syncStart !== this.props.syncStart) {\n            window.cancelAnimationFrame(this.animationID);\n            this.start = null;\n            var newKeyStrokeIndex = this.props.firstChange;\n            var newKeyStrokeTime = this.state.keyStrokeSplit[newKeyStrokeIndex] * (1.0 / this.props.speedModifier);\n            this.setState({\n                keyStrokeIndex: newKeyStrokeIndex,\n                finished: false,\n                keyStrokeTime: newKeyStrokeTime,\n                outputText: \"<span class=\\\"cursor\\\">|</span>\",\n                totalTime: this.props.totalTime,\n                speedModifier: this.props.speedModifier\n            });\n\n            this.startPlaying();\n        }\n    }\n\n    \n    constructor(props) {\n        super(props);\n\n        this.animationId = null;\n        this.start = null;\n\n        this.state.keyStrokeSplit = this.props.keyStrokeInfo.split(\"|\");\n        this.state.syncStart = this.props.syncStart;\n        this.state.finished = false;\n        this.state.mode = this.props.mode;\n        this.state.browser = this.props.browser;\n        this.state.summaryLength = this.props.summaryLength;\n        this.state.device = this.props.device;\n        this.state.keyStrokeIndex = this.props.firstChange; \n        this.state.totalTime = this.props.totalTime;\n        this.state.speedModifier = this.props.speedModifier;\n        this.state.keyStrokeTime = this.state.keyStrokeSplit[this.props.firstChange] * (1.0 / this.props.speedModifier);\n        this.state.cursorText = \"<span class=\\\"cursor\\\">|</span>\";\n        this.state.playing = this.props.playing;\n    }\n\n    render() { \n        var modality = (<p></p>);\n        var modalityDescription = \"Loading\"; \n        var modalityIconId = \"modalityIcon\" + this.props.queryKey;\n        if (this.state.mode == \"audio\") {\n            modality = (<FontAwesomeIcon icon={faHeadphones} />);\n            modalityDescription = \"Searcher listened to topic\";\n        } else if (this.state.mode == \"image\") {\n            modality = (<FontAwesomeIcon icon={faFont} />); \n            modalityDescription = \"Searcher read topic from image\";\n        }\n\n        var browser = (<p></p>);\n        var browserDescription = \"Loading\";\n        var browserIconId = \"browserIcon\" + this.props.queryKey;\n        if (this.state.browser == \"Chrome\" || \n            this.state.browser == \"Chrome Mobile\" ||\n            this.state.browser == \"Chrome Mobile iOS\" ||\n            this.state.browser == \"Chromium\") {\n            browser = (<FontAwesomeIcon icon={faChrome} />);\n            browserDescription = \"Searcher used Google Chrome Browser\";\n        } else if (this.state.browser == \"Edge\") {\n            browser = (<FontAwesomeIcon icon={faEdge} />);\n            browserDescription = \"Searcher used Microsoft Edge Browser\";\n        } else if (this.state.browser == \"Firefox\") {\n            browser = (<FontAwesomeIcon icon={faFirefox} />);\n            browserDescription = \"Searcher used Mozilla Firefox Browser\";\n        } else if (this.state.browser == \"Safari\" || \n            this.state.browser == \"Mobile Safari\") {\n            browserDescription = \"Searcher used Safari Browser\";\n            browser = (<FontAwesomeIcon icon={faSafari} />);\n        } else if (this.state.browser == \"Opera\") {\n            browser = (<FontAwesomeIcon icon={faOpera} />); \n            browserDescription = \"Searcher used Opera Browser\";\n        }\n\n        var device = (<p></p>);\n        var deviceDescription = \"Loading\";\n        var deviceIconId = \"deviceIcon\" + this.props.queryKey;\n        if (this.state.device == \"Mobile\") {\n            device = (<FontAwesomeIcon icon={faMobileAlt} />);\n            deviceDescription = \"Searcher was using a mobile phone\";\n        } else if (this.state.device == \"PC\") {\n            device = (<FontAwesomeIcon icon={faDesktop} />); \n            deviceDescription = \"Searcher was using a desktop computer\";\n        } else if (this.state.device == \"Tablet\") {\n            device = (<FontAwesomeIcon icon={faTabletAlt} />); \n            deviceDescription = \"Searcher was using a tablet\";\n        }\n\n        var summaryLength = (<p></p>);\n        var summaryDescription = \"Loading\";\n        var summaryIconId = \"summaryIcon\" + this.props.queryKey;\n        if (this.state.summaryLength == \"long\") {\n            summaryLength = (<span>L</span>);\n            summaryDescription = \"Searcher was given a long backstory\";\n        } else if (this.state.summaryLength == \"short\") {\n            summaryLength = (<span>S</span>);\n            summaryDescription = \"Searcher was given a short backstory\";\n        } else if (this.state.summaryLength == \"title\") {\n            summaryLength = (<span>T</span>);\n            summaryDescription = \"Searcher was given a title backstory\";\n        }\n\n        return ( \n            <div className={\"queryContainer \" + (this.state.finished ? \"finished\" : \"\")}>\n                <span className=\"queryMeta\">\n                        <span id={modalityIconId} className=\"searchMetaIcon\">{modality}</span> \n                        <span id={browserIconId} className=\"searchMetaIcon\">{browser}</span> \n                        <span id={deviceIconId} className=\"searchMetaIcon\">{device}</span> \n                        <span id={summaryIconId} className=\"searchMetaIcon\">{summaryLength}</span>\n                        <UncontrolledTooltip placement=\"left\" target={modalityIconId}>\n                            {modalityDescription}\n                        </UncontrolledTooltip>\n                        <UncontrolledTooltip placement=\"left\" target={browserIconId}>\n                            {browserDescription}\n                        </UncontrolledTooltip>\n                        <UncontrolledTooltip placement=\"left\" target={deviceIconId}>\n                            {deviceDescription}\n                        </UncontrolledTooltip>\n                        <UncontrolledTooltip placement=\"left\" target={summaryIconId}>\n                            {summaryDescription}\n                        </UncontrolledTooltip>\n                    <span className=\"queryKey\">#{this.props.queryKey.split(\"_\")[1]}</span>\n                    <FontAwesomeIcon className=\"searchMetaIcon\" icon={faSearch} />\n                </span>\n\n                <span className=\"queryBoxContainer\">\n                    <span className=\"queryBox\">\n                        <span className=\"textInnerBox\">\n                            <span dangerouslySetInnerHTML={{ __html: this.state.outputText }} />\n                        </span>\n                    </span>\n                </span>\n            </div>\n        );\n    }\n}\n \nexport default QueryInput;\n","import React, { Component, useState } from 'react';\nimport QueryInput from '../QueryInput/QueryInput';\nimport { Progress, Row, Col, Button, ButtonDropdown, Card, CardTitle, CardText, CardDeck, Collapse, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n\nimport { faUndo, faStepForward, faStepBackward, faStop} from \"@fortawesome/free-solid-svg-icons\";\nimport { faPlayCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport './TopicViewer.css';\n\nclass TopicViewer extends Component {\n\n    componentDidMount() {\n        fetch('./joined/' + this.state.topicId + '.json')\n            .then(response => response.json())\n            .then(topicData => this.setState({ topicData }));\n    }\n\n    handleCurrentTimeUpdate = (elapsed) => {\n        var currentTime = this.state.currentTime;\n        if (currentTime == null) {\n            this.setState( {currentTime: 0} );\n        }\n        else {\n            this.setState( {currentTime: currentTime + elapsed} );\n\n            if (currentTime > this.state.maximumTime + 5000 && this.state.autoPlay) {\n                this.nextTopic();\n            }\n        }\n    }\n\n    update(timestamp) {\n        if (this.start == undefined)\n            this.start = timestamp;\n\n        const elapsed = timestamp - this.start;\n\n        if (elapsed > 33) {\n            this.handleCurrentTimeUpdate(elapsed);\n            this.start = timestamp;\n        }\n\n        if (this.state.playing) {\n            this.animationID = window.requestAnimationFrame(this.update.bind(this));\n        }\n    }\n\n    startPlaying() {\n        this.setState({ playing: true, currentTime: 0});\n        this.animationID = window.requestAnimationFrame(this.update.bind(this));\n        this.start = null;\n    }\n\n    stopPlaying() {\n        window.cancelAnimationFrame(this.animationID);\n\n        this.setState( {playing: false} );\n        this.start = null;\n    }\n\n    startAutoplay() {\n        this.setState( {autoPlay: true} );\n        this.startPlaying();\n    }\n\n    stopAutoplay() {\n        this.setState( {autoPlay: false} );\n    }\n\n    componentWillUnmount() {\n        this.stopPlaying();\n    }\n\n    constructor(props) {\n        super(props);\n        this.start = null;\n        this.state = { \n            qCount: 10, \n            speedModifier: 1.0, \n            topicId: this.props.topicId, \n            syncStart: false, \n            showSummaries: true, \n            backButtonText: this.getBackButtonText(true), \n            showStats: false,\n            maximumTime: 0,\n            playing: false,\n            showSpeedMenu: false,\n            speedButtonText: this.getSpeedText(1.0),\n            autoPlay: true\n         }\n    }\n\n    getBackButtonText(showingSummaries) {\n        if (showingSummaries)\n            return \"Hide Summaries\";\n        return \"Show Summaries\";\n    }\n\n    getSpeedText(speedModifier) {\n      return \"Speed: \" + Number(speedModifier).toFixed(1) + \"X\";\n    }\n\n    getPlayPauseIcon() {\n        if (this.state.playing) {\n            return <FontAwesomeIcon className=\"playbackIcon\" icon={faStop} />;\n        }\n        return <FontAwesomeIcon className=\"playbackIcon\" icon={faPlayCircle} />;\n    }\n\n    nextTopic() {\n        var currentTopic = this.state.topicId;\n        var nextTopic = Number(currentTopic) + 1;\n        if (nextTopic == 174) {\n            nextTopic = 1;\n        }\n        this.setState({ topicData: null, topicId: nextTopic, currentTime: 0});\n\n        fetch('./joined/' + nextTopic + '.json')\n            .then(response => response.json())\n            .then(topicData => this.setState({ topicData }));\n    }\n\n    restartTopic() {\n        this.stopPlaying();\n        this.startPlaying();\n    }\n\n    prevTopic() {\n        var currentTopic = this.state.topicId;\n        var nextTopic = Number(currentTopic) - 1;\n        if (nextTopic == 0) {\n            nextTopic = 173;\n        }\n        this.setState({ topicData: null, topicId: nextTopic, currentTime: 0});\n\n        fetch('./joined/' + nextTopic + '.json')\n            .then(response => response.json())\n            .then(topicData => this.setState({ topicData }));\n    }\n\n    toggleSpeedMenu() {\n      this.setState({ showSpeedMenu: !this.state.showSpeedMenu });\n    }\n\n    toggleBack() {\n       this.setState({ showSummaries: !this.state.showSummaries , backButtonText : this.getBackButtonText(!this.state.showSummaries)});\n    }\n\n    togglePlayPause() {\n        if (!this.state.playing) {\n            this.startPlaying();\n        }\n        else {\n            this.stopPlaying();\n        }\n    }\n\n    toggleAutoMode() {\n        if (!this.state.autoPlay) {\n            this.startAutoplay();\n        }\n        else {\n            this.stopAutoplay();\n        }\n    }\n\n    handleTopicChange(event) {\n        this.setState({ topicData: null, topicId: event.target.value, currentTime: 0});\n\n        if (event.target.value != undefined && event.target.value > 0) {\n            fetch('./joined/' + event.target.value + '.json')\n                .then(response => response.json())\n                .then(topicData => this.setState({ topicData }));\n        }\n    }\n\n    handleQCountChange(event) {\n        if (this.state.playing) {\n            this.stopPlaying();\n            this.setState({qCount: event.target.value, currentTime: 0})\n            this.startPlaying();\n        }\n        else {\n            this.setState({qCount: event.target.value});\n        }\n    }\n\n    handleSpeedChange(event) {\n        if (this.state.playing) {\n            this.stopPlaying();\n            this.setState({speedModifier: event.target.value, currentTime: 0})\n            this.startPlaying();\n        }\n        else {\n            this.setState({speedModifier: event.target.value});\n        }\n       this.setState({speedButtonText: this.getSpeedText(event.target.value)});\n    }\n\n    handleAutoplayChange(event) {\n        this.setState({autoPlay: event.target.checked});\n    }\n\n    handleSyncChange(event) {\n        clearInterval(this.timerID);\n        this.setState({syncStart: event.target.checked});\n\n        if (event.target.checked) {\n            this.startPlaying();\n        }\n    }\n\n    findKeyStrokeIndexOfFirstChange(keyStrokeSplit) {\n        var result = this.state.syncStart ? 4 : 0;\n        if (this.state.syncStart) {\n            for (var i = result; i < keyStrokeSplit.length; i++) {\n                if (i % 2 != 0) {\n                    if (keyStrokeSplit[i] != \"\") {\n                        return i - 1;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    computeTotalTime(startingPoint, keyStrokeSplit) {\n        var totalTime = 0;\n        for (var i = startingPoint; i < keyStrokeSplit.length; i++) {\n            if (i % 2 == 0) {\n                totalTime += Number(keyStrokeSplit[i]) * (1.0/this.state.speedModifier);\n            }\n        }\n        return totalTime;\n    }\n\n    interleaveModalities(queries, numberOfQueries, currentTime) {\n        var queryInputs = [];\n        var keysUsed = [];\n        var maxTime = 0;\n\n        if (numberOfQueries > queries.length) {\n            numberOfQueries = queries.length;\n        }\n\n        while(queryInputs.length < numberOfQueries) {\n            for (var mode of [\"image\", \"audio\"]) {\n                for (var summaryLength of [\"title\", \"short\", \"long\"]) {\n                    for (var i = 0; i < queries.length; i++) {\n                        var query = queries[i];\n                        if (query.summary_modality == mode &&\n                            query.summary_length == summaryLength &&\n                            !keysUsed.includes(query.uid)) {\n\n                            keysUsed.push(query.uid);\n\n                            var keyStrokeSplit = query.typed_sequence.split(\"|\");\n                            var newKeyStrokeIndex = this.findKeyStrokeIndexOfFirstChange(keyStrokeSplit);\n                            var totalTime = this.computeTotalTime(newKeyStrokeIndex, keyStrokeSplit);\n\n                            if (totalTime > maxTime) {\n                                maxTime = totalTime;\n                            }\n\n                            queryInputs.push(\n                                <QueryInput key={query.uid} \n                                    queryKey={query.uid}\n                                    syncStart={this.state.syncStart}\n                                    currentTime={currentTime}\n                                    mode={query.summary_modality} \n                                    summaryLength={query.summary_length}\n                                    device={query.device}\n                                    browser={query.browser} \n                                    keyStrokeInfo={query.typed_sequence}\n                                    firstChange={newKeyStrokeIndex}\n                                    totalTime={totalTime} \n                                    speedModifier={this.state.speedModifier}\n                                    playing={this.state.playing} />\n                            );\n                            break;\n                        }\n                    }\n\n                    if (queryInputs.length == numberOfQueries) {\n                        this.state.maximumTime = maxTime;\n                        return queryInputs;\n                    } \n                }\n            }\n        }\n\n        this.state.maximumTime = maxTime;\n        return queryInputs;\n    }\n\n    wrapQueryInputsInColumns(queryInputs) {\n        var wrappedInputs = [];\n        for (var i = 0; i < queryInputs.length; i+=2) {\n            wrappedInputs.push(\n                <Row key={i} className=\"queryRow\">\n                    <div className=\"col-sm-12 col-sm-pull-12 col-md-6 col-md-pull-6\">\n                        {queryInputs[i]}\n                    </div>\n                    <div className=\"col-sm-12 col-sm-pull-12 col-md-6 col-md-pull-6\">\n                        {queryInputs[i+1]}\n                    </div>\n                </Row>\n            )\n        }\n        return wrappedInputs;\n    }\n\n    render() { \n        var queryInputs = (<p>Loading</p>); \n        var queriesSubmitted = (<p>Loading</p>);\n        var topicTitle = (<p>Loading</p>);\n        var topicSummaryShort = (<p>Loading</p>);\n        var topicSummaryLong = (<p>Loading</p>);\n        var meanQueryLength = (<p>Loading</p>);\n        var uniqueQueryCount = (<p>Loading</p>);\n        var uniqueWorkers = (<p>Loading</p>);\n\n        if (this.state.topicData != undefined) {\n            queryInputs = this.interleaveModalities(this.state.topicData.queries, this.state.qCount, this.state.currentTime);\n            queryInputs = this.wrapQueryInputsInColumns(queryInputs);\n            queriesSubmitted = this.state.topicData.queries.length;\n            topicTitle = this.state.topicData.doc_title; \n            topicSummaryShort = this.state.topicData.doc_summary_short;\n            topicSummaryLong = this.state.topicData.doc_summary_long;\n            meanQueryLength = this.state.topicData.mean_length.toFixed(2);\n            uniqueQueryCount = this.state.topicData.unique_queries;\n            uniqueWorkers = this.state.topicData.unique_workers;\n        }\n\n      return (\n            <div>\n                <div className=\"stickyBanner\">\n                    <div className=\"topicInfoContainer\">\n                        <Row>\n                            <div className=\"col-sm-12 col-sm-pull-0 col-md-4 col-md-pull-4 col-lg-3 col-lg-pull-3\">\n                                <img src=\"cc.png\" className=\"logo\" alt=\"CC News Query Explorer\"/>\n                            </div>\n                            <div className=\"col-sm-12 col-sm-pull-0 col-md-8 col-md-pull-8 col-lg-6 col-lg-pull-6\">\n                                <Row className=\"topicProgressRow topicControls\">\n                                    <div className=\"col-xs-3 mx-auto\">\n                                        <a href=\"#\" onClick={this.togglePlayPause.bind(this)}>{this.getPlayPauseIcon()}</a>\n                                        <a href=\"#\" onClick={this.restartTopic.bind(this)}><FontAwesomeIcon className=\"playbackSolidIcon\" icon={faUndo} /></a>\n                                    </div>\n                                    <div className=\"topicProgressCol col-xs-9 mx-auto\">\n                                        <a href=\"#\" onClick={this.prevTopic.bind(this)}><FontAwesomeIcon className=\"forwardBackSolidIcon\" icon={faStepBackward}/></a>\n                                        <b>Topic</b>: \n                                            <input type=\"text\" \n                                                maxLength=\"3\" \n                                                size=\"3\" \n                                                name=\"topic\" \n                                                value={this.state.topicId} \n                                                onChange={this.handleTopicChange.bind(this)} />\n                                        &nbsp;of 173&nbsp;\n                                        <a href=\"#\" onClick={this.nextTopic.bind(this)}><FontAwesomeIcon className=\"forwardBackSolidIcon\" icon={faStepForward}/></a>\n                                        <input id=\"autoPlay\" type=\"checkbox\" name=\"autoPlay\" checked={this.state.autoPlay} onChange={this.handleAutoplayChange.bind(this)} />\n                                        <label for=\"autoPlay\"><b>Auto</b></label>\n                                        &nbsp;\n                                    </div>\n                                </Row>\n                                <Row className=\"topicProgressRow\">\n                                    <Col className=\"topicProgressCol\">\n                                        <Progress color=\"info\" className=\"progressBar\" value={this.state.currentTime} max={this.state.maximumTime} style={{transition: \"none\"}} />\n                                    </Col>\n                                </Row>\n                            </div>\n                            <div className=\"controlPanel col-sm-12 col-sm-pull-0 col-md-12 col-md-pull-0 col-lg-3 col-lg-pull-3\">\n                                \n                                <div style={{display:\"block\"}}>\n                                    <span style={{\"white-space\":\"nowrap\", \"margin-right\":\"10px\", display:\"block\"}}>\n                                        <b>Queries</b>: &nbsp;<input type=\"text\" maxLength=\"3\" size=\"3\" name=\"qCount\" value={this.state.qCount} onChange={this.handleQCountChange.bind(this)} />\n                                        <input id=\"syncStart\" type=\"checkbox\" name=\"syncStart\" checked={this.state.syncStart} onChange={this.handleSyncChange.bind(this)} />\n                                        <label for=\"syncStart\"><b>Sync Start</b></label>\n                                    </span>\n\n                                    <span style={{\"white-space\":\"nowrap\", display: \"block\"}}>\n                                        <ButtonDropdown isOpen={this.state.showSpeedMenu} toggle={this.toggleSpeedMenu.bind(this)}>\n                                            <DropdownToggle color=\"info\" caret>\n                                                {this.state.speedButtonText}\n                                            </DropdownToggle>\n                                            <DropdownMenu>\n                                                <DropdownItem value={0.2} onClick={this.handleSpeedChange.bind(this)}>0.2</DropdownItem>\n                                                <DropdownItem value={0.5} onClick={this.handleSpeedChange.bind(this)}>0.5</DropdownItem>\n                                                <DropdownItem value={1.0} onClick={this.handleSpeedChange.bind(this)}>1.0</DropdownItem>\n                                                <DropdownItem value={2.0} onClick={this.handleSpeedChange.bind(this)}>2.0</DropdownItem>\n                                                <DropdownItem value={5.0} onClick={this.handleSpeedChange.bind(this)}>5.0</DropdownItem>\n                                            </DropdownMenu>\n                                        </ButtonDropdown>\n                                        <Button id=\"ayy\" color=\"info\" onClick={this.toggleBack.bind(this)} style={{ \"margin-bottom\": '0rem' }}>{this.state.backButtonText}</Button>\n                                    </span>\n                                </div>\n                            </div>\n                        </Row>\n                        <div className=\"mx-auto text-center topicTitleRow\">\n                            <b>Topic Title:&nbsp;</b><span>{topicTitle}</span>\n                        </div>\n                        <Row>\n                            <Col className=\"statsColumn\">\n                                <b>Queries Submitted</b>: {queriesSubmitted}<br></br>\n                            </Col>\n                            <Col className=\"statsColumn\">\n                                <b>Mean Word Count</b>: {meanQueryLength}<br></br>\n                            </Col>\n                            <Col className=\"statsColumn\">\n                                <b>Unique Query Count</b>: {uniqueQueryCount}<br></br>\n                            </Col>\n                            <Col className=\"statsColumn\">\n                                <b>Unique Workers</b>: {uniqueWorkers}\n                            </Col>\n                        </Row>\n\n                    <Collapse isOpen={this.state.showSummaries}>\n                        <br></br>\n                        <CardDeck>\n                            \n                            <Card body outline color=\"info\">\n                            <CardTitle className=\"text-center\" tag=\"b\">Short Summary</CardTitle>\n                            <CardText>{topicSummaryShort}</CardText>\n                            </Card>\n                            <Card body outline color=\"info\">\n                            <CardTitle className=\"text-center\" tag=\"b\">Long Summary</CardTitle>\n                            <CardText>{topicSummaryLong}</CardText>\n                            </Card>\n                        </CardDeck>\n                    </Collapse>\n                </div>\n                </div>\n                <div>\n                        { queryInputs }\n                </div>\n            </div>\n        );\n    }\n}\n \nexport default TopicViewer;\n","import React from 'react';\nimport './App.css';\nimport TopicViewer from './TopicViewer/TopicViewer';\n\n\nfunction App() {\n  return (\n    <div>\n      <TopicViewer topicId=\"1\" />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}